Ways to represent a graph:
Adjacency List - Mark the nodes with their neighbours
    0 -- 1
     \  / \
      2    3
       \
        4
Node    LL
0       1->2
1       0->2->3 
2       0->1->4 
3       1 
4       2 
Node store the head of the LLs


Adjacency Matrix - Aij = 1, if there is an edge between i and j, 0 otherwise.

    0   1
     \ /
      5
       \
    2 -- 3
       /
      4

    0   1   2   3   4   5
0   0   0   0   0   0   1   
1   0   0   0   0   0   1
2   0   0   0   1   0   0
3   0   0   1   0   1   1
4   0   0   0   1   0   0
5   1   1   0   1   0   0

Cost Adjacency Matrix
Aij = cost for an edge between i and j, -1 otherwise.
if cost can be 0:
      0
       \
    1 - 2
       / \
  3 - 4   5

    0   1   2    3   4   5
0   0   0   4    0   0   0   
1   0   0   8    0   0   0
2   0   0   0    0   2   11
3   0   0   0    0   9   0
4   0   0   2    9   0   0
5   0   0   11   0   0   0

if cost can be 0:
     0    1   2   3   4   5
0   -1   -1  -1  -1  -1  -1   
1   -1   -1  -1  -1  -1  -1
2   -1   -1  -1  -1  -1  -1
3   -1   -1  -1  -1  -1  -1
4   -1   -1  -1  -1  -1  -1
5   -1   -1  -1  -1  -1  -1

Edge Set - Store the pair of nodes/vertices connected with an edge.
    0 - 1
       /
      2
    (0,1),(1,2)
Other implementations :
    Compact list representation, 
    Cost adjacency list(Adjacency List + Cost)

